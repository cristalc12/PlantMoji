#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Adafruit_seesaw.h"

Adafruit_SSD1306 display(128, 64, &Wire, 4); // I2C [A4(SDA), A5(SCL)]
Adafruit_seesaw ss;

int photosensor_pin = 2;    

int air_value = 340;
int water_value = 1016;

int eye_width = 15;
int eye_height = 45;

int moisture_percent; 
int watered_bool; // 1=being watered, 0=not
int night_bool; // 1=dark, 0=light

const unsigned char bitmap_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0x80, 0x00, 0x00, 
	0x00, 0x0c, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x03, 0x00, 0x0f, 
	0xf0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 
	0xc0, 0x00, 0x00, 0x00, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x01, 0x80, 0x78, 0x00, 0x00, 0x00, 0x01, 
	0x81, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char bitmap_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0xe0, 0x00, 0x07, 0xfe, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x06, 
	0x00, 0x0f, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x78, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xf0, 0x00, 0x00, 
	0x00, 0x0c, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Setup ----------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  ss.begin(0x36);
  
  display.clearDisplay();
  eyes_placement(0, 0, 0);

  delay(1000);
}

// Loop ----------------------------------------------------------------------------------------------
void loop() {  
  watered_bool = soil_moisture_delta();
  moisture_percent = soil_moisture();
  night_bool = digitalRead(photosensor_pin); 
  
  if ((night_bool==0) && (watered_bool==1)) {
    for (int i = 0; i < 3; i++) {
      state_happy();
    }
  }
  else if ((night_bool==0) && ((moisture_percent>40) && (moisture_percent<=100))) {
    state_default();
  }
  else if ((night_bool==0) && ((moisture_percent>30) && (moisture_percent<=40))) {
    state_angry();
  }
  else if ((night_bool==0) && ((moisture_percent>10) && (moisture_percent<=30))) {
    state_sad();
  }
  else if ((night_bool==1) && (moisture_percent>5)) {
    state_sleep();
  }
  else if (moisture_percent<=10) {
    state_dead();
  }
}

// Functions ------------------------------------------------------------------------------------------
int soil_moisture() { 
  int soil_moist_value = ss.touchRead(0);
  int soil_moist_percent = map(soil_moist_value, air_value, water_value, 0, 100);
  
  Serial.println(soil_moist_percent);

  return soil_moist_percent;
}

int soil_moisture_delta() { 
  int first_soil_moist_percent = soil_moisture();
  delay(800);
  int second_soil_moist_percent = soil_moisture();

  int delta_moisture = second_soil_moist_percent - first_soil_moist_percent;
    
  Serial.println(delta_moisture);

  if (delta_moisture > 8) {
    return 1;
  }
  else {
    return 0;
  }  
}

void eyes_placement(int x, int y, int dh) { //default: (0, 0, 0)
  display.clearDisplay();

  display.fillRect(25+x, 11+y-(dh/2), eye_width, eye_height+dh, SSD1306_INVERSE);
  display.fillRect(88+x, 11+y-(dh/2), eye_width, eye_height+dh, SSD1306_INVERSE);

  display.display(); 
}

void eyes_blink(int x, int y) { //default: (0, 0)
  display.clearDisplay();
  eyes_placement(x, y, 0);  

  for (int i = 0; i < 3; i++) {
    display.clearDisplay();

    eyes_placement(x, y, -14*i);
    display.display();
  }
  for (int i = 3; i >= 0; i--) {
    display.clearDisplay();

    eyes_placement(x, y, -14*i);
    display.display();
  }
}

void state_default() {
  int rand_disp_x = random(-20, 20);
  int rand_disp_y = random(-10, 10);
  int rand_delay = random(3000, 6000);
  int blink_bool = random(0, 2);
  
  eyes_placement(rand_disp_x, rand_disp_y, 0); 
  if (blink_bool == 1) {
    eyes_blink(rand_disp_x, rand_disp_y);
  }  
  delay(rand_delay);
}

void state_happy() {
  char* text = "^ ^";
  
  display.clearDisplay();
  display.setTextSize(5);
  display.setTextColor(WHITE);
  
  display.setCursor(22, 24);
  display.println(text);
  display.display();
  delay(400);

  display.clearDisplay();
  display.setCursor(22, 16);
  display.println(text);
  display.display();
  delay(400);
}

void state_angry(void) {
  char* text = "- -";
  
  display.clearDisplay();
  display.setTextSize(5);
  display.setTextColor(WHITE);
  
  display.setCursor(21, 40);
  display.println(text);
  display.drawBitmap(84, 0, bitmap_1, 48, 48, WHITE);
  display.display();
  delay(300);

  display.clearDisplay();
  display.setCursor(23, 40);
  display.println(text);
  display.drawBitmap(84, 0, bitmap_2, 48, 48, WHITE);
  display.display();
  delay(600);
}

void state_sad(void) {
  char* text = "- -";
  int side_bool = random(0,2);
  int tear_size = random(8, 12);
  int tear_speed = random(5, 8);
  int tear_disp = random(30, 40);
  
  for (int i = 0; i < 15; i++) {
    display.clearDisplay();

    display.setTextSize(5);
    display.setTextColor(WHITE);
    
    display.setCursor(20+(i%2), 10);
    display.println(text);

    display.fillRect(41+(40*(side_bool)), tear_disp+tear_speed*i, 4, tear_size, SSD1306_INVERSE);  
    
    display.display();
    
    delay(100);
  }
}

void state_dead() {
  char* text = "X X";
  
  display.clearDisplay();
  display.setTextSize(5);
  display.setTextColor(WHITE);
  
  display.setCursor(22, 18);
  display.println(text);
  display.display();
  delay(1000); 
}

void state_sleep() {
  char* text = "- -";
  
  display.clearDisplay();
  display.setTextSize(5);
  display.setTextColor(WHITE);
  
  display.setCursor(22, 18);
  display.println(text);
  display.display();

  display.setTextSize(2); 
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(70, 0);
  display.println(F("ZZZ"));
  display.display();    
    
  display.startscrollright(0, 10);
  delay(1000); 
  display.stopscroll();
  delay(1000); 
}
